name: Build dnscat2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ruby-dev gcc make
        gem install bundler --user-install
        export PATH="$PATH:$(ruby -e 'puts Gem.user_dir')/bin"
        echo 'export PATH="$PATH:$(ruby -e "puts Gem.user_dir")/bin"' >> $GITHUB_ENV

    - name: Setup Server
      run: |
        echo "Current PATH: $PATH"
        export PATH="$PATH:$(ruby -e 'puts Gem.user_dir')/bin"
        echo "Updated PATH: $PATH"
        cd server
        $(ruby -e 'puts Gem.user_dir')/bin/bundle install --path vendor/bundle

    - name: Build Client
      run: |
        cd client
        make

    - name: Upload Linux Client Binary
      uses: actions/upload-artifact@v4
      with:
        name: dnscat2-client-linux
        path: client/dnscat

  build-windows:
    runs-on: windows-latest
  
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
  
    - name: Install Dependencies
      shell: pwsh
      run: |
        $tempPath = "C:\\Temp\\mingw.7z"
        $destPath = "C:\\MinGW"
        $sevenZipPath = "C:\\Program Files\\7-Zip\\7z.exe"
        
        Write-Host "Step 1: Starting MinGW setup..."
        
        # Этап 1: Скачивание архива
        Write-Host "Step 2: Downloading MinGW..."
        try {
            Invoke-WebRequest -Uri "https://github.com/niXman/mingw-builds-binaries/releases/download/13.2.0-rt_v11-rev0/x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0.7z" -OutFile $tempPath
            Write-Host "MinGW archive downloaded successfully to $tempPath"
        } catch {
            Write-Error "Failed to download MinGW archive! Error: $_"
            exit 1
        }
        
        # Проверка загрузки файла
        Write-Host "Step 3: Verifying downloaded archive..."
        if (-Not (Test-Path $tempPath)) {
            Write-Error "Downloaded file does not exist at $tempPath"
            exit 1
        }
        if ((Get-Item $tempPath).Length -eq 0) {
            Write-Error "Downloaded file is empty!"
            exit 1
        }
        Write-Host "Downloaded archive is valid."
        
        # Этап 2: Распаковка архива
        Write-Host "Step 4: Extracting MinGW..."
        try {
            if (Test-Path $sevenZipPath) {
                Write-Host "Using 7-Zip for extraction..."
                & "$sevenZipPath" x $tempPath -o$destPath -y
            } else {
                Write-Host "7-Zip not found, using Expand-Archive..."
                Expand-Archive -Path $tempPath -DestinationPath $destPath -Force
            }
            Write-Host "MinGW archive extracted successfully."
        } catch {
            Write-Error "Failed to extract MinGW archive! Error: $_"
            exit 1
        }
        
        # Этап 3: Проверка содержимого
                Write-Host "Step 5: Verifying extraction..."
        try {
            # Проверяем наличие ожидаемой структуры
            $expectedBinPath = Join-Path -Path $destPath -ChildPath "x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0\mingw64\bin"
            if (-Not (Test-Path $expectedBinPath)) {
                Write-Host "Directory 'bin' not found at expected path: $expectedBinPath. Checking archive structure..."
        
                # Ограничиваем проверку только корневой папкой и поддиректориями
                Write-Host "Listing first 20 files and directories in ${destPath}:"
                Get-ChildItem -Path $destPath -Directory -ErrorAction SilentlyContinue | Select-Object -First 20 | ForEach-Object {
                    Write-Host $_.FullName
                }
        
                # Проверяем папку 'mingw64\bin' и перемещаем файлы в корень
                $mingwRoot = Join-Path -Path $destPath -ChildPath "x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0\mingw64"
                if (Test-Path $mingwRoot) {
                    Write-Host "'mingw64' directory found at $mingwRoot. Moving its contents to root..."
                    Get-ChildItem -Path $mingwRoot | ForEach-Object {
                        Move-Item -Path $_.FullName -Destination $destPath -Force
                    }
                    # Удаляем остаточные директории
                    Remove-Item -Path (Join-Path -Path $destPath -ChildPath "x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0") -Recurse -Force
                    Write-Host "Files moved successfully."
                } else {
                    Write-Error "Directory 'mingw64' not found. Extraction failed."
                    exit 1
                }
            } else {
                Write-Host "'bin' directory found at the expected path. No further action required."
            }
        } catch {
            Write-Error "An error occurred during extraction verification. Error: $_"
            exit 1
        }
        
        Write-Host "Extraction and relocation successful. 'bin' directory is now at $destPath\bin."

        Write-Host "Extraction successful, 'bin' directory found."
        
        # Этап 4: Добавление в PATH
        Write-Host "Step 6: Adding MinGW to PATH..."
        $binPath = "$destPath\\bin"
        try {
            $env:PATH = "$binPath;" + $env:PATH
            [System.Environment]::SetEnvironmentVariable("PATH", $env:PATH, [System.EnvironmentVariableTarget]::Process)
            Write-Host "MinGW successfully added to PATH. Current PATH: $env:PATH"
        } catch {
            Write-Error "Failed to update PATH! Error: $_"
            exit 1
        }
        
        # Этап 5: Проверка наличия gcc и make
        Write-Host "Step 7: Verifying GCC and Make..."
        if (-Not (Get-Command "gcc" -ErrorAction SilentlyContinue)) {
            Write-Error "GCC is not available in PATH! Current PATH: $env:PATH"
            exit 1
        }
        Write-Host "GCC is available."
        if (-Not (Get-Command "make" -ErrorAction SilentlyContinue)) {
            Write-Error "Make is not available in PATH! Current PATH: $env:PATH"
            exit 1
        }
        Write-Host "Make is available."
        
        Write-Host "Step 8: MinGW setup completed successfully!"

  
    - name: Build Client
      shell: pwsh
      run: |
        cd client
        make -f Makefile.win
  
    - name: Upload Windows Client Binary
      uses: actions/upload-artifact@v4
      with:
        name: dnscat2-client-windows
        path: client/dnscat2-client.exe
